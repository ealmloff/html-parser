#![allow(clippy::enum_variant_names)]
#![allow(dead_code)]
use kalosm_sample::*;
#[derive(Debug, Clone, Copy, Parse)]
pub enum BValues {
    #[parse(rename = "false")]
    False,
    #[parse(rename = "true")]
    True,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum UValues {
    #[parse(rename = "false")]
    False,
    #[parse(rename = "true")]
    True,
    #[parse(rename = "undefined")]
    Undefined,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum OValues {
    #[parse(rename = "off")]
    Off,
    #[parse(rename = "on")]
    On,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum YValues {
    #[parse(rename = "no")]
    No,
    #[parse(rename = "yes")]
    Yes,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum WValues {
    #[parse(rename = "hard")]
    Hard,
    #[parse(rename = "soft")]
    Soft,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum DValues {
    #[parse(rename = "auto")]
    Auto,
    #[parse(rename = "ltr")]
    Ltr,
    #[parse(rename = "rtl")]
    Rtl,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum MValues {
    #[parse(rename = "dialog")]
    Dialog,
    #[parse(rename = "get")]
    Get,
    #[parse(rename = "post")]
    Post,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum FmValues {
    #[parse(rename = "get")]
    Get,
    #[parse(rename = "post")]
    Post,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum SValues {
    #[parse(rename = "col")]
    Col,
    #[parse(rename = "colgroup")]
    Colgroup,
    #[parse(rename = "row")]
    Row,
    #[parse(rename = "rowgroup")]
    Rowgroup,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum TValues {
    #[parse(rename = "button")]
    Button,
    #[parse(rename = "checkbox")]
    Checkbox,
    #[parse(rename = "color")]
    Color,
    #[parse(rename = "date")]
    Date,
    #[parse(rename = "datetime")]
    Datetime,
    #[parse(rename = "datetime-local")]
    DatetimeLocal,
    #[parse(rename = "email")]
    Email,
    #[parse(rename = "file")]
    File,
    #[parse(rename = "hidden")]
    Hidden,
    #[parse(rename = "image")]
    Image,
    #[parse(rename = "month")]
    Month,
    #[parse(rename = "number")]
    Number,
    #[parse(rename = "password")]
    Password,
    #[parse(rename = "radio")]
    Radio,
    #[parse(rename = "range")]
    Range,
    #[parse(rename = "reset")]
    Reset,
    #[parse(rename = "search")]
    Search,
    #[parse(rename = "submit")]
    Submit,
    #[parse(rename = "tel")]
    Tel,
    #[parse(rename = "text")]
    Text,
    #[parse(rename = "time")]
    Time,
    #[parse(rename = "url")]
    Url,
    #[parse(rename = "week")]
    Week,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum ImValues {
    #[parse(rename = "email")]
    Email,
    #[parse(rename = "full-width-latin")]
    FullWidthLatin,
    #[parse(rename = "kana")]
    Kana,
    #[parse(rename = "kana-name")]
    KanaName,
    #[parse(rename = "katakana")]
    Katakana,
    #[parse(rename = "latin")]
    Latin,
    #[parse(rename = "latin-name")]
    LatinName,
    #[parse(rename = "latin-prose")]
    LatinProse,
    #[parse(rename = "numeric")]
    Numeric,
    #[parse(rename = "tel")]
    Tel,
    #[parse(rename = "url")]
    Url,
    #[parse(rename = "verbatim")]
    Verbatim,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum BtValues {
    #[parse(rename = "button")]
    Button,
    #[parse(rename = "menu")]
    Menu,
    #[parse(rename = "reset")]
    Reset,
    #[parse(rename = "submit")]
    Submit,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum LtValues {
    #[parse(rename = "1")]
    Value1,
    #[parse(rename = "A")]
    A,
    #[parse(rename = "I")]
    I,
    #[parse(rename = "a")]
    A2,
    #[parse(rename = "i")]
    I2,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum MtValues {
    #[parse(rename = "context")]
    Context,
    #[parse(rename = "toolbar")]
    Toolbar,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum MitValues {
    #[parse(rename = "checkbox")]
    Checkbox,
    #[parse(rename = "command")]
    Command,
    #[parse(rename = "radio")]
    Radio,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum EtValues {
    #[parse(rename = "application/x-www-form-urlencoded")]
    ApplicationxWwwFormUrlencoded,
    #[parse(rename = "multipart/form-data")]
    MultipartformData,
    #[parse(rename = "text/plain")]
    Textplain,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum TkValues {
    #[parse(rename = "captions")]
    Captions,
    #[parse(rename = "chapters")]
    Chapters,
    #[parse(rename = "descriptions")]
    Descriptions,
    #[parse(rename = "metadata")]
    Metadata,
    #[parse(rename = "subtitles")]
    Subtitles,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum PlValues {
    #[parse(rename = "auto")]
    Auto,
    #[parse(rename = "metadata")]
    Metadata,
    #[parse(rename = "none")]
    None,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum ShValues {
    #[parse(rename = "circle")]
    Circle,
    #[parse(rename = "default")]
    Default,
    #[parse(rename = "poly")]
    Poly,
    #[parse(rename = "rect")]
    Rect,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum XoValues {
    #[parse(rename = "anonymous")]
    Anonymous,
    #[parse(rename = "use-credentials")]
    UseCredentials,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum TargetValues {
    #[parse(rename = "_blank")]
    Blank,
    #[parse(rename = "_parent")]
    Parent,
    #[parse(rename = "_self")]
    ValueSelf,
    #[parse(rename = "_top")]
    Top,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum SbValues {
    #[parse(rename = "allow-forms")]
    AllowForms,
    #[parse(rename = "allow-modals")]
    AllowModals,
    #[parse(rename = "allow-pointer-lock")]
    AllowPointerLock,
    #[parse(rename = "allow-popups")]
    AllowPopups,
    #[parse(rename = "allow-popups-to-escape-sandbox")]
    AllowPopupsToEscapeSandbox,
    #[parse(rename = "allow-same-origin")]
    AllowSameOrigin,
    #[parse(rename = "allow-scripts")]
    AllowScripts,
    #[parse(rename = "allow-top-navigation")]
    AllowTopNavigation,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum TristateValues {
    #[parse(rename = "false")]
    False,
    #[parse(rename = "mixed")]
    Mixed,
    #[parse(rename = "true")]
    True,
    #[parse(rename = "undefined")]
    Undefined,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum InputautocompleteValues {
    #[parse(rename = "additional-name")]
    AdditionalName,
    #[parse(rename = "address-level1")]
    AddressLevel1,
    #[parse(rename = "address-level2")]
    AddressLevel2,
    #[parse(rename = "address-level3")]
    AddressLevel3,
    #[parse(rename = "address-level4")]
    AddressLevel4,
    #[parse(rename = "address-line1")]
    AddressLine1,
    #[parse(rename = "address-line2")]
    AddressLine2,
    #[parse(rename = "address-line3")]
    AddressLine3,
    #[parse(rename = "bday")]
    Bday,
    #[parse(rename = "bday-day")]
    BdayDay,
    #[parse(rename = "bday-month")]
    BdayMonth,
    #[parse(rename = "bday-year")]
    BdayYear,
    #[parse(rename = "billing")]
    Billing,
    #[parse(rename = "cc-additional-name")]
    CcAdditionalName,
    #[parse(rename = "cc-csc")]
    CcCsc,
    #[parse(rename = "cc-exp")]
    CcExp,
    #[parse(rename = "cc-exp-month")]
    CcExpMonth,
    #[parse(rename = "cc-exp-year")]
    CcExpYear,
    #[parse(rename = "cc-family-name")]
    CcFamilyName,
    #[parse(rename = "cc-given-name")]
    CcGivenName,
    #[parse(rename = "cc-name")]
    CcName,
    #[parse(rename = "cc-number")]
    CcNumber,
    #[parse(rename = "cc-type")]
    CcType,
    #[parse(rename = "country")]
    Country,
    #[parse(rename = "country-name")]
    CountryName,
    #[parse(rename = "current-password")]
    CurrentPassword,
    #[parse(rename = "email")]
    Email,
    #[parse(rename = "family-name")]
    FamilyName,
    #[parse(rename = "fax")]
    Fax,
    #[parse(rename = "given-name")]
    GivenName,
    #[parse(rename = "home")]
    Home,
    #[parse(rename = "honorific-prefix")]
    HonorificPrefix,
    #[parse(rename = "honorific-suffix")]
    HonorificSuffix,
    #[parse(rename = "impp")]
    Impp,
    #[parse(rename = "language")]
    Language,
    #[parse(rename = "mobile")]
    Mobile,
    #[parse(rename = "name")]
    Name,
    #[parse(rename = "new-password")]
    NewPassword,
    #[parse(rename = "nickname")]
    Nickname,
    #[parse(rename = "off")]
    Off,
    #[parse(rename = "on")]
    On,
    #[parse(rename = "organization")]
    Organization,
    #[parse(rename = "organization-title")]
    OrganizationTitle,
    #[parse(rename = "pager")]
    Pager,
    #[parse(rename = "photo")]
    Photo,
    #[parse(rename = "postal-code")]
    PostalCode,
    #[parse(rename = "sex")]
    Sex,
    #[parse(rename = "shipping")]
    Shipping,
    #[parse(rename = "street-address")]
    StreetAddress,
    #[parse(rename = "tel")]
    Tel,
    #[parse(rename = "tel-area-code")]
    TelAreaCode,
    #[parse(rename = "tel-country-code")]
    TelCountryCode,
    #[parse(rename = "tel-extension")]
    TelExtension,
    #[parse(rename = "tel-local")]
    TelLocal,
    #[parse(rename = "tel-local-prefix")]
    TelLocalPrefix,
    #[parse(rename = "tel-local-suffix")]
    TelLocalSuffix,
    #[parse(rename = "tel-national")]
    TelNational,
    #[parse(rename = "transaction-amount")]
    TransactionAmount,
    #[parse(rename = "transaction-currency")]
    TransactionCurrency,
    #[parse(rename = "url")]
    Url,
    #[parse(rename = "username")]
    Username,
    #[parse(rename = "work")]
    Work,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum AutocompleteValues {
    #[parse(rename = "both")]
    Both,
    #[parse(rename = "inline")]
    Inline,
    #[parse(rename = "list")]
    List,
    #[parse(rename = "none")]
    None,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum CurrentValues {
    #[parse(rename = "date")]
    Date,
    #[parse(rename = "false")]
    False,
    #[parse(rename = "location")]
    Location,
    #[parse(rename = "page")]
    Page,
    #[parse(rename = "step")]
    Step,
    #[parse(rename = "time")]
    Time,
    #[parse(rename = "true")]
    True,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum DropeffectValues {
    #[parse(rename = "copy")]
    Copy,
    #[parse(rename = "execute")]
    Execute,
    #[parse(rename = "link")]
    Link,
    #[parse(rename = "move")]
    Move,
    #[parse(rename = "none")]
    None,
    #[parse(rename = "popup")]
    Popup,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum InvalidValues {
    #[parse(rename = "false")]
    False,
    #[parse(rename = "grammar")]
    Grammar,
    #[parse(rename = "spelling")]
    Spelling,
    #[parse(rename = "true")]
    True,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum LiveValues {
    #[parse(rename = "assertive")]
    Assertive,
    #[parse(rename = "off")]
    Off,
    #[parse(rename = "polite")]
    Polite,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum OrientationValues {
    #[parse(rename = "horizontal")]
    Horizontal,
    #[parse(rename = "undefined")]
    Undefined,
    #[parse(rename = "vertical")]
    Vertical,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum RelevantValues {
    #[parse(rename = "additions")]
    Additions,
    #[parse(rename = "additions text")]
    AdditionsText,
    #[parse(rename = "all")]
    All,
    #[parse(rename = "removals")]
    Removals,
    #[parse(rename = "text")]
    Text,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum SortValues {
    #[parse(rename = "ascending")]
    Ascending,
    #[parse(rename = "descending")]
    Descending,
    #[parse(rename = "none")]
    None,
    #[parse(rename = "other")]
    Other,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum RolesValues {
    #[parse(rename = "alert")]
    Alert,
    #[parse(rename = "alertdialog")]
    Alertdialog,
    #[parse(rename = "application")]
    Application,
    #[parse(rename = "article")]
    Article,
    #[parse(rename = "banner")]
    Banner,
    #[parse(rename = "button")]
    Button,
    #[parse(rename = "cell")]
    Cell,
    #[parse(rename = "checkbox")]
    Checkbox,
    #[parse(rename = "columnheader")]
    Columnheader,
    #[parse(rename = "combobox")]
    Combobox,
    #[parse(rename = "complementary")]
    Complementary,
    #[parse(rename = "contentinfo")]
    Contentinfo,
    #[parse(rename = "definition")]
    Definition,
    #[parse(rename = "dialog")]
    Dialog,
    #[parse(rename = "directory")]
    Directory,
    #[parse(rename = "doc-abstract")]
    DocAbstract,
    #[parse(rename = "doc-acknowledgments")]
    DocAcknowledgments,
    #[parse(rename = "doc-afterword")]
    DocAfterword,
    #[parse(rename = "doc-appendix")]
    DocAppendix,
    #[parse(rename = "doc-backlink")]
    DocBacklink,
    #[parse(rename = "doc-biblioentry")]
    DocBiblioentry,
    #[parse(rename = "doc-bibliography")]
    DocBibliography,
    #[parse(rename = "doc-biblioref")]
    DocBiblioref,
    #[parse(rename = "doc-chapter")]
    DocChapter,
    #[parse(rename = "doc-colophon")]
    DocColophon,
    #[parse(rename = "doc-conclusion")]
    DocConclusion,
    #[parse(rename = "doc-cover")]
    DocCover,
    #[parse(rename = "doc-credit")]
    DocCredit,
    #[parse(rename = "doc-credits")]
    DocCredits,
    #[parse(rename = "doc-dedication")]
    DocDedication,
    #[parse(rename = "doc-endnote")]
    DocEndnote,
    #[parse(rename = "doc-endnotes")]
    DocEndnotes,
    #[parse(rename = "doc-epigraph")]
    DocEpigraph,
    #[parse(rename = "doc-epilogue")]
    DocEpilogue,
    #[parse(rename = "doc-errata")]
    DocErrata,
    #[parse(rename = "doc-example")]
    DocExample,
    #[parse(rename = "doc-footnote")]
    DocFootnote,
    #[parse(rename = "doc-foreword")]
    DocForeword,
    #[parse(rename = "doc-glossary")]
    DocGlossary,
    #[parse(rename = "doc-glossref")]
    DocGlossref,
    #[parse(rename = "doc-index")]
    DocIndex,
    #[parse(rename = "doc-introduction")]
    DocIntroduction,
    #[parse(rename = "doc-noteref")]
    DocNoteref,
    #[parse(rename = "doc-notice")]
    DocNotice,
    #[parse(rename = "doc-pagebreak")]
    DocPagebreak,
    #[parse(rename = "doc-pagelist")]
    DocPagelist,
    #[parse(rename = "doc-part")]
    DocPart,
    #[parse(rename = "doc-preface")]
    DocPreface,
    #[parse(rename = "doc-prologue")]
    DocPrologue,
    #[parse(rename = "doc-pullquote")]
    DocPullquote,
    #[parse(rename = "doc-qna")]
    DocQna,
    #[parse(rename = "doc-subtitle")]
    DocSubtitle,
    #[parse(rename = "doc-tip")]
    DocTip,
    #[parse(rename = "doc-toc")]
    DocToc,
    #[parse(rename = "document")]
    Document,
    #[parse(rename = "feed")]
    Feed,
    #[parse(rename = "figure")]
    Figure,
    #[parse(rename = "form")]
    Form,
    #[parse(rename = "grid")]
    Grid,
    #[parse(rename = "gridcell")]
    Gridcell,
    #[parse(rename = "group")]
    Group,
    #[parse(rename = "heading")]
    Heading,
    #[parse(rename = "img")]
    Img,
    #[parse(rename = "link")]
    Link,
    #[parse(rename = "list")]
    List,
    #[parse(rename = "listbox")]
    Listbox,
    #[parse(rename = "listitem")]
    Listitem,
    #[parse(rename = "log")]
    Log,
    #[parse(rename = "main")]
    Main,
    #[parse(rename = "marquee")]
    Marquee,
    #[parse(rename = "math")]
    Math,
    #[parse(rename = "menu")]
    Menu,
    #[parse(rename = "menubar")]
    Menubar,
    #[parse(rename = "menuitem")]
    Menuitem,
    #[parse(rename = "menuitemcheckbox")]
    Menuitemcheckbox,
    #[parse(rename = "menuitemradio")]
    Menuitemradio,
    #[parse(rename = "navigation")]
    Navigation,
    #[parse(rename = "none")]
    None,
    #[parse(rename = "note")]
    Note,
    #[parse(rename = "option")]
    Option,
    #[parse(rename = "presentation")]
    Presentation,
    #[parse(rename = "progressbar")]
    Progressbar,
    #[parse(rename = "radio")]
    Radio,
    #[parse(rename = "radiogroup")]
    Radiogroup,
    #[parse(rename = "region")]
    Region,
    #[parse(rename = "row")]
    Row,
    #[parse(rename = "rowgroup")]
    Rowgroup,
    #[parse(rename = "rowheader")]
    Rowheader,
    #[parse(rename = "scrollbar")]
    Scrollbar,
    #[parse(rename = "search")]
    Search,
    #[parse(rename = "searchbox")]
    Searchbox,
    #[parse(rename = "separator")]
    Separator,
    #[parse(rename = "slider")]
    Slider,
    #[parse(rename = "spinbutton")]
    Spinbutton,
    #[parse(rename = "status")]
    Status,
    #[parse(rename = "switch")]
    Switch,
    #[parse(rename = "tab")]
    Tab,
    #[parse(rename = "table")]
    Table,
    #[parse(rename = "tablist")]
    Tablist,
    #[parse(rename = "tabpanel")]
    Tabpanel,
    #[parse(rename = "term")]
    Term,
    #[parse(rename = "text")]
    Text,
    #[parse(rename = "textbox")]
    Textbox,
    #[parse(rename = "timer")]
    Timer,
    #[parse(rename = "toolbar")]
    Toolbar,
    #[parse(rename = "tooltip")]
    Tooltip,
    #[parse(rename = "tree")]
    Tree,
    #[parse(rename = "treegrid")]
    Treegrid,
    #[parse(rename = "treeitem")]
    Treeitem,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum MetanamesValues {
    #[parse(rename = "application-name")]
    ApplicationName,
    #[parse(rename = "author")]
    Author,
    #[parse(rename = "description")]
    Description,
    #[parse(rename = "format-detection")]
    FormatDetection,
    #[parse(rename = "generator")]
    Generator,
    #[parse(rename = "keywords")]
    Keywords,
    #[parse(rename = "publisher")]
    Publisher,
    #[parse(rename = "referrer")]
    Referrer,
    #[parse(rename = "robots")]
    Robots,
    #[parse(rename = "theme-color")]
    ThemeColor,
    #[parse(rename = "viewport")]
    Viewport,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum HaspopupValues {
    #[parse(rename = "dialog")]
    Dialog,
    #[parse(rename = "false")]
    False,
    #[parse(rename = "grid")]
    Grid,
    #[parse(rename = "listbox")]
    Listbox,
    #[parse(rename = "menu")]
    Menu,
    #[parse(rename = "tree")]
    Tree,
    #[parse(rename = "true")]
    True,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum DecodingValues {
    #[parse(rename = "async")]
    Async,
    #[parse(rename = "auto")]
    Auto,
    #[parse(rename = "sync")]
    Sync,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum LoadingValues {
    #[parse(rename = "eager")]
    Eager,
    #[parse(rename = "lazy")]
    Lazy,
}
#[derive(Debug, Clone, Copy, Parse)]
pub enum ReferrerpolicyValues {
    #[parse(rename = "no-referrer")]
    NoReferrer,
    #[parse(rename = "no-referrer-when-downgrade")]
    NoReferrerWhenDowngrade,
    #[parse(rename = "origin")]
    Origin,
    #[parse(rename = "origin-when-cross-origin")]
    OriginWhenCrossOrigin,
    #[parse(rename = "same-origin")]
    SameOrigin,
    #[parse(rename = "strict-origin")]
    StrictOrigin,
    #[parse(rename = "strict-origin-when-cross-origin")]
    StrictOriginWhenCrossOrigin,
    #[parse(rename = "unsafe-url")]
    UnsafeUrl,
}
#[derive(Debug, Clone)]
pub enum AAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Download(String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Href(String),
    Hreflang(String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Ping(String),
    Referrerpolicy(String),
    Rel(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Target(TargetValues),
    Title(String),
    Translate(YValues),
    Type(String),
}

impl kalosm_sample::Parse for AAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"download\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Download(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"href\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Href(value))
        )
        .or(
        LiteralParser::new("\"hreflang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Hreflang(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"ping\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ping(value))
        )
        .or(
        LiteralParser::new("\"referrerpolicy\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Referrerpolicy(value))
        )
        .or(
        LiteralParser::new("\"rel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Rel(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"target\"=")
            .ignore_output_then(TargetValues::new_parser())
            .map_output(|value| Self::Target(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum AbbrAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for AbbrAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum AddressAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for AddressAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum AreaAttributes {
    Accesskey(String),
    Alt(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Coords(String),
    Dir(DValues),
    Download(String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Href(String),
    Hreflang(String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Ping(String),
    Rel(String),
    Role(RolesValues),
    Shape(ShValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Target(TargetValues),
    Title(String),
    Translate(YValues),
    Type(String),
}

impl kalosm_sample::Parse for AreaAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"alt\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Alt(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"coords\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Coords(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"download\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Download(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"href\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Href(value))
        )
        .or(
        LiteralParser::new("\"hreflang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Hreflang(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"ping\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ping(value))
        )
        .or(
        LiteralParser::new("\"rel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Rel(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"shape\"=")
            .ignore_output_then(ShValues::new_parser())
            .map_output(|value| Self::Shape(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"target\"=")
            .ignore_output_then(TargetValues::new_parser())
            .map_output(|value| Self::Target(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ArticleAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for ArticleAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum AsideAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for AsideAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum AudioAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Autoplay(// Could not find value set
String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Controls(// Could not find value set
String),
    Crossorigin(XoValues),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Loop(// Could not find value set
String),
    Mediagroup(String),
    Muted(// Could not find value set
String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Preload(PlValues),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for AudioAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"autoplay\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Autoplay(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"controls\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Controls(value))
        )
        .or(
        LiteralParser::new("\"crossorigin\"=")
            .ignore_output_then(XoValues::new_parser())
            .map_output(|value| Self::Crossorigin(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"loop\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Loop(value))
        )
        .or(
        LiteralParser::new("\"mediagroup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Mediagroup(value))
        )
        .or(
        LiteralParser::new("\"muted\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Muted(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"preload\"=")
            .ignore_output_then(PlValues::new_parser())
            .map_output(|value| Self::Preload(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum BAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for BAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum BaseAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Href(String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Target(TargetValues),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for BaseAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"href\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Href(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"target\"=")
            .ignore_output_then(TargetValues::new_parser())
            .map_output(|value| Self::Target(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum BdiAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for BdiAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum BdoAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for BdoAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum BlockquoteAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Cite(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for BlockquoteAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"cite\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Cite(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum BodyAttributes {
    Accesskey(String),
    Alink(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Background(String),
    Bgcolor(String),
    Bottommargin(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Leftmargin(String),
    Link(String),
    Onabort(String),
    Onafterprint(String),
    Onbeforeprint(String),
    Onbeforeunload(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Onhashchange(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onlanguagechange(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmessage(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onoffline(String),
    Ononline(String),
    Onpagehide(String),
    Onpageshow(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onpopstate(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onredo(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onstorage(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onundo(String),
    Onunload(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Rightmargin(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Text(String),
    Title(String),
    Topmargin(String),
    Translate(YValues),
    Vlink(String),
}

impl kalosm_sample::Parse for BodyAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"alink\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Alink(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"background\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Background(value))
        )
        .or(
        LiteralParser::new("\"bgcolor\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Bgcolor(value))
        )
        .or(
        LiteralParser::new("\"bottommargin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Bottommargin(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"leftmargin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Leftmargin(value))
        )
        .or(
        LiteralParser::new("\"link\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Link(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onafterprint\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onafterprint(value))
        )
        .or(
        LiteralParser::new("\"onbeforeprint\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onbeforeprint(value))
        )
        .or(
        LiteralParser::new("\"onbeforeunload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onbeforeunload(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"onhashchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onhashchange(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onlanguagechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onlanguagechange(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmessage(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onoffline\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onoffline(value))
        )
        .or(
        LiteralParser::new("\"ononline\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ononline(value))
        )
        .or(
        LiteralParser::new("\"onpagehide\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpagehide(value))
        )
        .or(
        LiteralParser::new("\"onpageshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpageshow(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onpopstate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpopstate(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onredo\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onredo(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onstorage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstorage(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onundo\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onundo(value))
        )
        .or(
        LiteralParser::new("\"onunload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onunload(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"rightmargin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Rightmargin(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"text\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Text(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"topmargin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Topmargin(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"vlink\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Vlink(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum BrAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Clear(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for BrAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"clear\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Clear(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ButtonAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Autocomplete(String),
    Autofocus(// Could not find value set
String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Disabled(// Could not find value set
String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Form(String),
    Formaction(String),
    Formenctype(EtValues),
    Formmethod(FmValues),
    Formnovalidate(// Could not find value set
String),
    Formtarget(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(BtValues),
    Value(String),
}

impl kalosm_sample::Parse for ButtonAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"autocomplete\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocomplete(value))
        )
        .or(
        LiteralParser::new("\"autofocus\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Autofocus(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"disabled\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Disabled(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"formaction\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Formaction(value))
        )
        .or(
        LiteralParser::new("\"formenctype\"=")
            .ignore_output_then(EtValues::new_parser())
            .map_output(|value| Self::Formenctype(value))
        )
        .or(
        LiteralParser::new("\"formmethod\"=")
            .ignore_output_then(FmValues::new_parser())
            .map_output(|value| Self::Formmethod(value))
        )
        .or(
        LiteralParser::new("\"formnovalidate\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Formnovalidate(value))
        )
        .or(
        LiteralParser::new("\"formtarget\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Formtarget(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(BtValues::new_parser())
            .map_output(|value| Self::Type(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum CanvasAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Height(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    MozOpaque(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Width(String),
}

impl kalosm_sample::Parse for CanvasAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"height\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Height(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"moz-opaque\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::MozOpaque(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum CaptionAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for CaptionAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum CiteAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for CiteAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum CodeAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for CodeAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ColAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Span(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for ColAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"span\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Span(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ColgroupAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Span(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for ColgroupAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"span\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Span(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DataAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Value(String),
}

impl kalosm_sample::Parse for DataAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DatalistAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DatalistAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DdAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Nowrap(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DdAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"nowrap\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Nowrap(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DelAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Cite(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Datetime(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DelAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"cite\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Cite(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"datetime\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Datetime(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DetailsAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Open(// Could not find value set
String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DetailsAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"open\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Open(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DfnAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DfnAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DialogAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Open(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DialogAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"open\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Open(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DivAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DivAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DlAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DlAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum DtAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for DtAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum EmAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for EmAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum EmbedAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Height(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(String),
    Width(String),
}

impl kalosm_sample::Parse for EmbedAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"height\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Height(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum FieldsetAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Disabled(// Could not find value set
String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Form(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for FieldsetAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"disabled\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Disabled(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum FigcaptionAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for FigcaptionAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum FigureAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for FigureAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum FooterAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for FooterAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum FormAttributes {
    Accept(String),
    AcceptCharset(String),
    Accesskey(String),
    Action(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Autocomplete(OValues),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Enctype(EtValues),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Method(MValues),
    Name(String),
    Novalidate(// Could not find value set
String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Target(TargetValues),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for FormAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accept\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accept(value))
        .or(
        LiteralParser::new("\"accept-charset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AcceptCharset(value))
        )
        .or(
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        )
        .or(
        LiteralParser::new("\"action\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Action(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"autocomplete\"=")
            .ignore_output_then(OValues::new_parser())
            .map_output(|value| Self::Autocomplete(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"enctype\"=")
            .ignore_output_then(EtValues::new_parser())
            .map_output(|value| Self::Enctype(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"method\"=")
            .ignore_output_then(MValues::new_parser())
            .map_output(|value| Self::Method(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"novalidate\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Novalidate(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"target\"=")
            .ignore_output_then(TargetValues::new_parser())
            .map_output(|value| Self::Target(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum H1Attributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for H1Attributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum H2Attributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for H2Attributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum H3Attributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for H3Attributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum H4Attributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for H4Attributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum H5Attributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for H5Attributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum H6Attributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for H6Attributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum HeadAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Profile(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for HeadAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"profile\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Profile(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum HeaderAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for HeaderAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum HgroupAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for HgroupAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum HrAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Color(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Noshade(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Size(String),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Width(String),
}

impl kalosm_sample::Parse for HrAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"color\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Color(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"noshade\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Noshade(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"size\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Size(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum HtmlAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Manifest(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Version(String),
    Xmlns(String),
}

impl kalosm_sample::Parse for HtmlAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"manifest\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Manifest(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"version\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Version(value))
        )
        .or(
        LiteralParser::new("\"xmlns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Xmlns(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum IAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for IAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum IframeAttributes {
    Accesskey(String),
    Allow(String),
    Allowfullscreen(// Could not find value set
String),
    Allowpaymentrequest(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Csp(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Height(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Importance(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Referrerpolicy(String),
    Role(RolesValues),
    Sandbox(SbValues),
    Seamless(// Could not find value set
String),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Srcdoc(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Width(String),
}

impl kalosm_sample::Parse for IframeAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"allow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Allow(value))
        )
        .or(
        LiteralParser::new("\"allowfullscreen\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Allowfullscreen(value))
        )
        .or(
        LiteralParser::new("\"allowpaymentrequest\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Allowpaymentrequest(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"csp\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Csp(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"height\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Height(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"importance\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Importance(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"referrerpolicy\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Referrerpolicy(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"sandbox\"=")
            .ignore_output_then(SbValues::new_parser())
            .map_output(|value| Self::Sandbox(value))
        )
        .or(
        LiteralParser::new("\"seamless\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Seamless(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"srcdoc\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Srcdoc(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ImgAttributes {
    Accesskey(String),
    Alt(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Crossorigin(XoValues),
    Decoding(DecodingValues),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Height(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Importance(String),
    Inputmode(String),
    Intrinsicsize(String),
    Is(String),
    Ismap(// Could not find value set
String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Loading(LoadingValues),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Referrerpolicy(ReferrerpolicyValues),
    Role(RolesValues),
    Sizes(String),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Srcset(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Usemap(String),
    Width(String),
}

impl kalosm_sample::Parse for ImgAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"alt\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Alt(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"crossorigin\"=")
            .ignore_output_then(XoValues::new_parser())
            .map_output(|value| Self::Crossorigin(value))
        )
        .or(
        LiteralParser::new("\"decoding\"=")
            .ignore_output_then(DecodingValues::new_parser())
            .map_output(|value| Self::Decoding(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"height\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Height(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"importance\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Importance(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"intrinsicsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Intrinsicsize(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"ismap\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Ismap(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"loading\"=")
            .ignore_output_then(LoadingValues::new_parser())
            .map_output(|value| Self::Loading(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"referrerpolicy\"=")
            .ignore_output_then(ReferrerpolicyValues::new_parser())
            .map_output(|value| Self::Referrerpolicy(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"sizes\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Sizes(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"srcset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Srcset(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"usemap\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Usemap(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum InputAttributes {
    Accept(String),
    Accesskey(String),
    Alt(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Autocomplete(InputautocompleteValues),
    Autofocus(// Could not find value set
String),
    Checked(// Could not find value set
String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Dirname(String),
    Disabled(// Could not find value set
String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Form(String),
    Formaction(String),
    Formenctype(EtValues),
    Formmethod(FmValues),
    Formnovalidate(// Could not find value set
String),
    Formtarget(String),
    Height(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(ImValues),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    List(String),
    Max(String),
    Maxlength(String),
    Min(String),
    Minlength(String),
    Multiple(// Could not find value set
String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Pattern(String),
    Placeholder(String),
    Readonly(// Could not find value set
String),
    Required(// Could not find value set
String),
    Role(RolesValues),
    Size(String),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Step(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(TValues),
    Value(String),
    Width(String),
}

impl kalosm_sample::Parse for InputAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accept\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accept(value))
        .or(
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        )
        .or(
        LiteralParser::new("\"alt\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Alt(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"autocomplete\"=")
            .ignore_output_then(InputautocompleteValues::new_parser())
            .map_output(|value| Self::Autocomplete(value))
        )
        .or(
        LiteralParser::new("\"autofocus\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Autofocus(value))
        )
        .or(
        LiteralParser::new("\"checked\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Checked(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"dirname\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dirname(value))
        )
        .or(
        LiteralParser::new("\"disabled\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Disabled(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"formaction\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Formaction(value))
        )
        .or(
        LiteralParser::new("\"formenctype\"=")
            .ignore_output_then(EtValues::new_parser())
            .map_output(|value| Self::Formenctype(value))
        )
        .or(
        LiteralParser::new("\"formmethod\"=")
            .ignore_output_then(FmValues::new_parser())
            .map_output(|value| Self::Formmethod(value))
        )
        .or(
        LiteralParser::new("\"formnovalidate\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Formnovalidate(value))
        )
        .or(
        LiteralParser::new("\"formtarget\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Formtarget(value))
        )
        .or(
        LiteralParser::new("\"height\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Height(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(ImValues::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"list\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::List(value))
        )
        .or(
        LiteralParser::new("\"max\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Max(value))
        )
        .or(
        LiteralParser::new("\"maxlength\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Maxlength(value))
        )
        .or(
        LiteralParser::new("\"min\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Min(value))
        )
        .or(
        LiteralParser::new("\"minlength\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Minlength(value))
        )
        .or(
        LiteralParser::new("\"multiple\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Multiple(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"pattern\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Pattern(value))
        )
        .or(
        LiteralParser::new("\"placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Placeholder(value))
        )
        .or(
        LiteralParser::new("\"readonly\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Readonly(value))
        )
        .or(
        LiteralParser::new("\"required\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Required(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"size\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Size(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"step\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Step(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(TValues::new_parser())
            .map_output(|value| Self::Type(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum InsAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Cite(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Datetime(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for InsAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"cite\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Cite(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"datetime\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Datetime(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum KbdAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for KbdAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum LabelAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    For(String),
    Form(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for LabelAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"for\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::For(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum LegendAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for LegendAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum LiAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(String),
    Value(String),
}

impl kalosm_sample::Parse for LiAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum LinkAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    As(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Crossorigin(XoValues),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Href(String),
    Hreflang(String),
    Id(String),
    Importance(String),
    Inputmode(String),
    Integrity(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Media(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Referrerpolicy(String),
    Rel(String),
    Role(RolesValues),
    Sizes(String),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(String),
}

impl kalosm_sample::Parse for LinkAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"as\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::As(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"crossorigin\"=")
            .ignore_output_then(XoValues::new_parser())
            .map_output(|value| Self::Crossorigin(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"href\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Href(value))
        )
        .or(
        LiteralParser::new("\"hreflang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Hreflang(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"importance\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Importance(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"integrity\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Integrity(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"media\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Media(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"referrerpolicy\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Referrerpolicy(value))
        )
        .or(
        LiteralParser::new("\"rel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Rel(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"sizes\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Sizes(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum MainAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for MainAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum MapAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for MapAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum MarkAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for MarkAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum MenuAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for MenuAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum MetaAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Charset(String),
    Class(String),
    Content(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    HttpEquiv(String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Scheme(String),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for MetaAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"charset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Charset(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"content\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Content(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"http-equiv\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::HttpEquiv(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"scheme\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Scheme(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum MeterAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Form(String),
    Hidden(// Could not find value set
String),
    High(String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Low(String),
    Max(String),
    Min(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Optimum(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Value(String),
}

impl kalosm_sample::Parse for MeterAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"high\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::High(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"low\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Low(value))
        )
        .or(
        LiteralParser::new("\"max\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Max(value))
        )
        .or(
        LiteralParser::new("\"min\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Min(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"optimum\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Optimum(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum NavAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for NavAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum NoscriptAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for NoscriptAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ObjectAttributes {
    Accesskey(String),
    Archive(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Border(String),
    Class(String),
    Classid(String),
    Codebase(String),
    Codetype(String),
    Contenteditable(String),
    Contextmenu(String),
    Data(String),
    Declare(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Form(String),
    Height(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Standby(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(String),
    Typemustmatch(// Could not find value set
String),
    Usemap(String),
    Width(String),
}

impl kalosm_sample::Parse for ObjectAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"archive\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Archive(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"border\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Border(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"classid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Classid(value))
        )
        .or(
        LiteralParser::new("\"codebase\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Codebase(value))
        )
        .or(
        LiteralParser::new("\"codetype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Codetype(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"data\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Data(value))
        )
        .or(
        LiteralParser::new("\"declare\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Declare(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"height\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Height(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"standby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Standby(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
        .or(
        LiteralParser::new("\"typemustmatch\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Typemustmatch(value))
        )
        .or(
        LiteralParser::new("\"usemap\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Usemap(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum OlAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Compact(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Reversed(// Could not find value set
String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Start(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(LtValues),
}

impl kalosm_sample::Parse for OlAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"compact\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Compact(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"reversed\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Reversed(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"start\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Start(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(LtValues::new_parser())
            .map_output(|value| Self::Type(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum OptgroupAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Disabled(// Could not find value set
String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Label(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for OptgroupAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"disabled\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Disabled(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Label(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum OptionAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Disabled(// Could not find value set
String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Label(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Selected(// Could not find value set
String),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Value(String),
}

impl kalosm_sample::Parse for OptionAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"disabled\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Disabled(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Label(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"selected\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Selected(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum OutputAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    For(String),
    Form(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for OutputAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"for\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::For(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum PAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for PAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ParamAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(String),
    Value(String),
    Valuetype(String),
}

impl kalosm_sample::Parse for ParamAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
        .or(
        LiteralParser::new("\"valuetype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Valuetype(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum PictureAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for PictureAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum PreAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Cols(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Width(String),
    Wrap(String),
}

impl kalosm_sample::Parse for PreAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"cols\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Cols(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
        .or(
        LiteralParser::new("\"wrap\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Wrap(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ProgressAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Max(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Value(String),
}

impl kalosm_sample::Parse for ProgressAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"max\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Max(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"value\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Value(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum QAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Cite(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for QAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"cite\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Cite(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum RbAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for RbAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum RpAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for RpAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum RtAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for RtAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum RubyAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for RubyAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SampAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SampAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ScriptAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Async(// Could not find value set
String),
    Autocapitalize(String),
    Charset(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Crossorigin(XoValues),
    Defer(// Could not find value set
String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Integrity(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Nomodule(String),
    Nonce(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Referrerpolicy(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Style(String),
    Tabindex(String),
    Text(String),
    Title(String),
    Translate(YValues),
    Type(String),
}

impl kalosm_sample::Parse for ScriptAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"async\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Async(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"charset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Charset(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"crossorigin\"=")
            .ignore_output_then(XoValues::new_parser())
            .map_output(|value| Self::Crossorigin(value))
        )
        .or(
        LiteralParser::new("\"defer\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Defer(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"integrity\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Integrity(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"nomodule\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Nomodule(value))
        )
        .or(
        LiteralParser::new("\"nonce\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Nonce(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"referrerpolicy\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Referrerpolicy(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"text\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Text(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SectionAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SectionAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SelectAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Autocomplete(InputautocompleteValues),
    Autofocus(// Could not find value set
String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Disabled(// Could not find value set
String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Form(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Multiple(// Could not find value set
String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Required(// Could not find value set
String),
    Role(RolesValues),
    Size(String),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SelectAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"autocomplete\"=")
            .ignore_output_then(InputautocompleteValues::new_parser())
            .map_output(|value| Self::Autocomplete(value))
        )
        .or(
        LiteralParser::new("\"autofocus\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Autofocus(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"disabled\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Disabled(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"multiple\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Multiple(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"required\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Required(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"size\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Size(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SlotAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SlotAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SmallAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SmallAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SourceAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Media(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Sizes(String),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Srcset(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(String),
}

impl kalosm_sample::Parse for SourceAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"media\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Media(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"sizes\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Sizes(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"srcset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Srcset(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SpanAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SpanAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum StrongAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for StrongAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum StyleAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Media(String),
    Nonce(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Scoped(// Could not find value set
String),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Type(String),
}

impl kalosm_sample::Parse for StyleAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"media\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Media(value))
        )
        .or(
        LiteralParser::new("\"nonce\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Nonce(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"scoped\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Scoped(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"type\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Type(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SubAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SubAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SummaryAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SummaryAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum SupAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for SupAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TableAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Border(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TableAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"border\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Border(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TbodyAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TbodyAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TdAttributes {
    Abbr(String),
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Axis(String),
    Bgcolor(String),
    Class(String),
    Colspan(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Headers(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Rowspan(String),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TdAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"abbr\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Abbr(value))
        .or(
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        )
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"axis\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Axis(value))
        )
        .or(
        LiteralParser::new("\"bgcolor\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Bgcolor(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Colspan(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"headers\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Headers(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Rowspan(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TemplateAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TemplateAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TextareaAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Autocomplete(InputautocompleteValues),
    Autofocus(// Could not find value set
String),
    Class(String),
    Cols(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Dirname(String),
    Disabled(// Could not find value set
String),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Form(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(ImValues),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Maxlength(String),
    Minlength(String),
    Name(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Placeholder(String),
    Readonly(// Could not find value set
String),
    Required(// Could not find value set
String),
    Role(RolesValues),
    Rows(String),
    Slot(String),
    Spellcheck(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Wrap(WValues),
}

impl kalosm_sample::Parse for TextareaAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"autocomplete\"=")
            .ignore_output_then(InputautocompleteValues::new_parser())
            .map_output(|value| Self::Autocomplete(value))
        )
        .or(
        LiteralParser::new("\"autofocus\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Autofocus(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"cols\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Cols(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"dirname\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dirname(value))
        )
        .or(
        LiteralParser::new("\"disabled\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Disabled(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"form\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Form(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(ImValues::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"maxlength\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Maxlength(value))
        )
        .or(
        LiteralParser::new("\"minlength\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Minlength(value))
        )
        .or(
        LiteralParser::new("\"name\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Name(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Placeholder(value))
        )
        .or(
        LiteralParser::new("\"readonly\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Readonly(value))
        )
        .or(
        LiteralParser::new("\"required\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Required(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"rows\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Rows(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"wrap\"=")
            .ignore_output_then(WValues::new_parser())
            .map_output(|value| Self::Wrap(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TfootAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TfootAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum ThAttributes {
    Abbr(String),
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Axis(String),
    Bgcolor(String),
    Class(String),
    Colspan(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Headers(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Rowspan(String),
    Scope(SValues),
    Slot(String),
    Sorted(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for ThAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"abbr\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Abbr(value))
        .or(
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        )
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"axis\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Axis(value))
        )
        .or(
        LiteralParser::new("\"bgcolor\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Bgcolor(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Colspan(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"headers\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Headers(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Rowspan(value))
        )
        .or(
        LiteralParser::new("\"scope\"=")
            .ignore_output_then(SValues::new_parser())
            .map_output(|value| Self::Scope(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"sorted\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Sorted(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TheadAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TheadAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TimeAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Datetime(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TimeAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"datetime\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Datetime(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TitleAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TitleAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TrAttributes {
    Accesskey(String),
    Align(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TrAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"align\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Align(value))
        )
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum TrackAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Default(// Could not find value set
String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Kind(TkValues),
    Label(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Srclang(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for TrackAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"default\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Default(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"kind\"=")
            .ignore_output_then(TkValues::new_parser())
            .map_output(|value| Self::Kind(value))
        )
        .or(
        LiteralParser::new("\"label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Label(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"srclang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Srclang(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum UAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for UAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum UlAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Compact(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for UlAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"compact\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Compact(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum VarAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for VarAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum VideoAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Autoplay(// Could not find value set
String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Controls(// Could not find value set
String),
    Crossorigin(XoValues),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Height(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Loop(// Could not find value set
String),
    Mediagroup(String),
    Muted(// Could not find value set
String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Poster(String),
    Preload(PlValues),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Src(String),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
    Width(String),
}

impl kalosm_sample::Parse for VideoAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"autoplay\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Autoplay(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"controls\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Controls(value))
        )
        .or(
        LiteralParser::new("\"crossorigin\"=")
            .ignore_output_then(XoValues::new_parser())
            .map_output(|value| Self::Crossorigin(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"height\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Height(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"loop\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Loop(value))
        )
        .or(
        LiteralParser::new("\"mediagroup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Mediagroup(value))
        )
        .or(
        LiteralParser::new("\"muted\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Muted(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"poster\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Poster(value))
        )
        .or(
        LiteralParser::new("\"preload\"=")
            .ignore_output_then(PlValues::new_parser())
            .map_output(|value| Self::Preload(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"src\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Src(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
        .or(
        LiteralParser::new("\"width\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Width(value))
        )
    }
}
#[derive(Debug, Clone)]
pub enum WbrAttributes {
    Accesskey(String),
    AriaActivedescendant(String),
    AriaAtomic(BValues),
    AriaAutocomplete(AutocompleteValues),
    AriaBusy(BValues),
    AriaChecked(TristateValues),
    AriaColcount(String),
    AriaColindex(String),
    AriaColspan(String),
    AriaControls(String),
    AriaCurrent(CurrentValues),
    AriaDescribedby(String),
    AriaDetails(String),
    AriaDisabled(BValues),
    AriaDropeffect(DropeffectValues),
    AriaErrormessage(String),
    AriaExpanded(UValues),
    AriaFlowto(String),
    AriaGrabbed(UValues),
    AriaHaspopup(HaspopupValues),
    AriaHidden(BValues),
    AriaInvalid(InvalidValues),
    AriaKeyshortcuts(String),
    AriaLabel(String),
    AriaLabelledby(String),
    AriaLevel(String),
    AriaLive(LiveValues),
    AriaModal(BValues),
    AriaMultiline(BValues),
    AriaMultiselectable(BValues),
    AriaOrientation(OrientationValues),
    AriaOwns(String),
    AriaPlaceholder(String),
    AriaPosinset(String),
    AriaPressed(TristateValues),
    AriaReadonly(BValues),
    AriaRelevant(RelevantValues),
    AriaRequired(BValues),
    AriaRoledescription(String),
    AriaRowcount(String),
    AriaRowindex(String),
    AriaRowspan(String),
    AriaSelected(UValues),
    AriaSetsize(String),
    AriaSort(SortValues),
    AriaValuemax(String),
    AriaValuemin(String),
    AriaValuenow(String),
    AriaValuetext(String),
    Autocapitalize(String),
    Class(String),
    Contenteditable(String),
    Contextmenu(String),
    Dir(DValues),
    Draggable(BValues),
    Dropzone(String),
    Exportparts(String),
    Hidden(// Could not find value set
String),
    Id(String),
    Inputmode(String),
    Is(String),
    Itemid(String),
    Itemprop(String),
    Itemref(String),
    Itemscope(// Could not find value set
String),
    Itemtype(String),
    Lang(String),
    Onabort(String),
    Onblur(String),
    Oncanplay(String),
    Oncanplaythrough(String),
    Onchange(String),
    Onclick(String),
    Oncontextmenu(String),
    Ondblclick(String),
    Ondrag(String),
    Ondragend(String),
    Ondragenter(String),
    Ondragleave(String),
    Ondragover(String),
    Ondragstart(String),
    Ondrop(String),
    Ondurationchange(String),
    Onemptied(String),
    Onended(String),
    Onerror(String),
    Onfocus(String),
    Onformchange(String),
    Onforminput(String),
    Oninput(String),
    Oninvalid(String),
    Onkeydown(String),
    Onkeypress(String),
    Onkeyup(String),
    Onload(String),
    Onloadeddata(String),
    Onloadedmetadata(String),
    Onloadstart(String),
    Onmousedown(String),
    Onmouseenter(String),
    Onmouseleave(String),
    Onmousemove(String),
    Onmouseout(String),
    Onmouseover(String),
    Onmouseup(String),
    Onmousewheel(String),
    Onpause(String),
    Onplay(String),
    Onplaying(String),
    Onpointercancel(String),
    Onpointerdown(String),
    Onpointerenter(String),
    Onpointerleave(String),
    Onpointerlockchange(String),
    Onpointerlockerror(String),
    Onpointermove(String),
    Onpointerout(String),
    Onpointerover(String),
    Onpointerup(String),
    Onprogress(String),
    Onratechange(String),
    Onreadystatechange(String),
    Onreset(String),
    Onresize(String),
    Onscroll(String),
    Onseeked(String),
    Onseeking(String),
    Onselect(String),
    Onshow(String),
    Onstalled(String),
    Onsubmit(String),
    Onsuspend(String),
    Ontimeupdate(String),
    Onvolumechange(String),
    Onwaiting(String),
    Part(String),
    Role(RolesValues),
    Slot(String),
    Spellcheck(BValues),
    Style(String),
    Tabindex(String),
    Title(String),
    Translate(YValues),
}

impl kalosm_sample::Parse for WbrAttributes {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("\"accesskey\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Accesskey(value))
        .or(
        LiteralParser::new("\"aria-activedescendant\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaActivedescendant(value))
        )
        .or(
        LiteralParser::new("\"aria-atomic\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaAtomic(value))
        )
        .or(
        LiteralParser::new("\"aria-autocomplete\"=")
            .ignore_output_then(AutocompleteValues::new_parser())
            .map_output(|value| Self::AriaAutocomplete(value))
        )
        .or(
        LiteralParser::new("\"aria-busy\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaBusy(value))
        )
        .or(
        LiteralParser::new("\"aria-checked\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaChecked(value))
        )
        .or(
        LiteralParser::new("\"aria-colcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColcount(value))
        )
        .or(
        LiteralParser::new("\"aria-colindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColindex(value))
        )
        .or(
        LiteralParser::new("\"aria-colspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaColspan(value))
        )
        .or(
        LiteralParser::new("\"aria-controls\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaControls(value))
        )
        .or(
        LiteralParser::new("\"aria-current\"=")
            .ignore_output_then(CurrentValues::new_parser())
            .map_output(|value| Self::AriaCurrent(value))
        )
        .or(
        LiteralParser::new("\"aria-describedby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDescribedby(value))
        )
        .or(
        LiteralParser::new("\"aria-details\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaDetails(value))
        )
        .or(
        LiteralParser::new("\"aria-disabled\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaDisabled(value))
        )
        .or(
        LiteralParser::new("\"aria-dropeffect\"=")
            .ignore_output_then(DropeffectValues::new_parser())
            .map_output(|value| Self::AriaDropeffect(value))
        )
        .or(
        LiteralParser::new("\"aria-errormessage\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaErrormessage(value))
        )
        .or(
        LiteralParser::new("\"aria-expanded\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaExpanded(value))
        )
        .or(
        LiteralParser::new("\"aria-flowto\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaFlowto(value))
        )
        .or(
        LiteralParser::new("\"aria-grabbed\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaGrabbed(value))
        )
        .or(
        LiteralParser::new("\"aria-haspopup\"=")
            .ignore_output_then(HaspopupValues::new_parser())
            .map_output(|value| Self::AriaHaspopup(value))
        )
        .or(
        LiteralParser::new("\"aria-hidden\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaHidden(value))
        )
        .or(
        LiteralParser::new("\"aria-invalid\"=")
            .ignore_output_then(InvalidValues::new_parser())
            .map_output(|value| Self::AriaInvalid(value))
        )
        .or(
        LiteralParser::new("\"aria-keyshortcuts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaKeyshortcuts(value))
        )
        .or(
        LiteralParser::new("\"aria-label\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabel(value))
        )
        .or(
        LiteralParser::new("\"aria-labelledby\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLabelledby(value))
        )
        .or(
        LiteralParser::new("\"aria-level\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaLevel(value))
        )
        .or(
        LiteralParser::new("\"aria-live\"=")
            .ignore_output_then(LiveValues::new_parser())
            .map_output(|value| Self::AriaLive(value))
        )
        .or(
        LiteralParser::new("\"aria-modal\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaModal(value))
        )
        .or(
        LiteralParser::new("\"aria-multiline\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiline(value))
        )
        .or(
        LiteralParser::new("\"aria-multiselectable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaMultiselectable(value))
        )
        .or(
        LiteralParser::new("\"aria-orientation\"=")
            .ignore_output_then(OrientationValues::new_parser())
            .map_output(|value| Self::AriaOrientation(value))
        )
        .or(
        LiteralParser::new("\"aria-owns\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaOwns(value))
        )
        .or(
        LiteralParser::new("\"aria-placeholder\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPlaceholder(value))
        )
        .or(
        LiteralParser::new("\"aria-posinset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaPosinset(value))
        )
        .or(
        LiteralParser::new("\"aria-pressed\"=")
            .ignore_output_then(TristateValues::new_parser())
            .map_output(|value| Self::AriaPressed(value))
        )
        .or(
        LiteralParser::new("\"aria-readonly\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaReadonly(value))
        )
        .or(
        LiteralParser::new("\"aria-relevant\"=")
            .ignore_output_then(RelevantValues::new_parser())
            .map_output(|value| Self::AriaRelevant(value))
        )
        .or(
        LiteralParser::new("\"aria-required\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::AriaRequired(value))
        )
        .or(
        LiteralParser::new("\"aria-roledescription\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRoledescription(value))
        )
        .or(
        LiteralParser::new("\"aria-rowcount\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowcount(value))
        )
        .or(
        LiteralParser::new("\"aria-rowindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowindex(value))
        )
        .or(
        LiteralParser::new("\"aria-rowspan\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaRowspan(value))
        )
        .or(
        LiteralParser::new("\"aria-selected\"=")
            .ignore_output_then(UValues::new_parser())
            .map_output(|value| Self::AriaSelected(value))
        )
        .or(
        LiteralParser::new("\"aria-setsize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaSetsize(value))
        )
        .or(
        LiteralParser::new("\"aria-sort\"=")
            .ignore_output_then(SortValues::new_parser())
            .map_output(|value| Self::AriaSort(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemax\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemax(value))
        )
        .or(
        LiteralParser::new("\"aria-valuemin\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuemin(value))
        )
        .or(
        LiteralParser::new("\"aria-valuenow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuenow(value))
        )
        .or(
        LiteralParser::new("\"aria-valuetext\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::AriaValuetext(value))
        )
        .or(
        LiteralParser::new("\"autocapitalize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Autocapitalize(value))
        )
        .or(
        LiteralParser::new("\"class\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Class(value))
        )
        .or(
        LiteralParser::new("\"contenteditable\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contenteditable(value))
        )
        .or(
        LiteralParser::new("\"contextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Contextmenu(value))
        )
        .or(
        LiteralParser::new("\"dir\"=")
            .ignore_output_then(DValues::new_parser())
            .map_output(|value| Self::Dir(value))
        )
        .or(
        LiteralParser::new("\"draggable\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Draggable(value))
        )
        .or(
        LiteralParser::new("\"dropzone\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Dropzone(value))
        )
        .or(
        LiteralParser::new("\"exportparts\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Exportparts(value))
        )
        .or(
        LiteralParser::new("\"hidden\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Hidden(value))
        )
        .or(
        LiteralParser::new("\"id\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Id(value))
        )
        .or(
        LiteralParser::new("\"inputmode\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Inputmode(value))
        )
        .or(
        LiteralParser::new("\"is\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Is(value))
        )
        .or(
        LiteralParser::new("\"itemid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemid(value))
        )
        .or(
        LiteralParser::new("\"itemprop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemprop(value))
        )
        .or(
        LiteralParser::new("\"itemref\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemref(value))
        )
        .or(
        LiteralParser::new("\"itemscope\"=")
            .ignore_output_then(// Could not find value set
String::new_parser())
            .map_output(|value| Self::Itemscope(value))
        )
        .or(
        LiteralParser::new("\"itemtype\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Itemtype(value))
        )
        .or(
        LiteralParser::new("\"lang\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Lang(value))
        )
        .or(
        LiteralParser::new("\"onabort\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onabort(value))
        )
        .or(
        LiteralParser::new("\"onblur\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onblur(value))
        )
        .or(
        LiteralParser::new("\"oncanplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplay(value))
        )
        .or(
        LiteralParser::new("\"oncanplaythrough\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncanplaythrough(value))
        )
        .or(
        LiteralParser::new("\"onchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onchange(value))
        )
        .or(
        LiteralParser::new("\"onclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onclick(value))
        )
        .or(
        LiteralParser::new("\"oncontextmenu\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oncontextmenu(value))
        )
        .or(
        LiteralParser::new("\"ondblclick\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondblclick(value))
        )
        .or(
        LiteralParser::new("\"ondrag\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrag(value))
        )
        .or(
        LiteralParser::new("\"ondragend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragend(value))
        )
        .or(
        LiteralParser::new("\"ondragenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragenter(value))
        )
        .or(
        LiteralParser::new("\"ondragleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragleave(value))
        )
        .or(
        LiteralParser::new("\"ondragover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragover(value))
        )
        .or(
        LiteralParser::new("\"ondragstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondragstart(value))
        )
        .or(
        LiteralParser::new("\"ondrop\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondrop(value))
        )
        .or(
        LiteralParser::new("\"ondurationchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ondurationchange(value))
        )
        .or(
        LiteralParser::new("\"onemptied\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onemptied(value))
        )
        .or(
        LiteralParser::new("\"onended\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onended(value))
        )
        .or(
        LiteralParser::new("\"onerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onerror(value))
        )
        .or(
        LiteralParser::new("\"onfocus\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onfocus(value))
        )
        .or(
        LiteralParser::new("\"onformchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onformchange(value))
        )
        .or(
        LiteralParser::new("\"onforminput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onforminput(value))
        )
        .or(
        LiteralParser::new("\"oninput\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninput(value))
        )
        .or(
        LiteralParser::new("\"oninvalid\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Oninvalid(value))
        )
        .or(
        LiteralParser::new("\"onkeydown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeydown(value))
        )
        .or(
        LiteralParser::new("\"onkeypress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeypress(value))
        )
        .or(
        LiteralParser::new("\"onkeyup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onkeyup(value))
        )
        .or(
        LiteralParser::new("\"onload\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onload(value))
        )
        .or(
        LiteralParser::new("\"onloadeddata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadeddata(value))
        )
        .or(
        LiteralParser::new("\"onloadedmetadata\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadedmetadata(value))
        )
        .or(
        LiteralParser::new("\"onloadstart\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onloadstart(value))
        )
        .or(
        LiteralParser::new("\"onmousedown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousedown(value))
        )
        .or(
        LiteralParser::new("\"onmouseenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseenter(value))
        )
        .or(
        LiteralParser::new("\"onmouseleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseleave(value))
        )
        .or(
        LiteralParser::new("\"onmousemove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousemove(value))
        )
        .or(
        LiteralParser::new("\"onmouseout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseout(value))
        )
        .or(
        LiteralParser::new("\"onmouseover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseover(value))
        )
        .or(
        LiteralParser::new("\"onmouseup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmouseup(value))
        )
        .or(
        LiteralParser::new("\"onmousewheel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onmousewheel(value))
        )
        .or(
        LiteralParser::new("\"onpause\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpause(value))
        )
        .or(
        LiteralParser::new("\"onplay\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplay(value))
        )
        .or(
        LiteralParser::new("\"onplaying\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onplaying(value))
        )
        .or(
        LiteralParser::new("\"onpointercancel\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointercancel(value))
        )
        .or(
        LiteralParser::new("\"onpointerdown\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerdown(value))
        )
        .or(
        LiteralParser::new("\"onpointerenter\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerenter(value))
        )
        .or(
        LiteralParser::new("\"onpointerleave\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerleave(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockchange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockchange(value))
        )
        .or(
        LiteralParser::new("\"onpointerlockerror\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerlockerror(value))
        )
        .or(
        LiteralParser::new("\"onpointermove\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointermove(value))
        )
        .or(
        LiteralParser::new("\"onpointerout\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerout(value))
        )
        .or(
        LiteralParser::new("\"onpointerover\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerover(value))
        )
        .or(
        LiteralParser::new("\"onpointerup\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onpointerup(value))
        )
        .or(
        LiteralParser::new("\"onprogress\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onprogress(value))
        )
        .or(
        LiteralParser::new("\"onratechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onratechange(value))
        )
        .or(
        LiteralParser::new("\"onreadystatechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreadystatechange(value))
        )
        .or(
        LiteralParser::new("\"onreset\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onreset(value))
        )
        .or(
        LiteralParser::new("\"onresize\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onresize(value))
        )
        .or(
        LiteralParser::new("\"onscroll\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onscroll(value))
        )
        .or(
        LiteralParser::new("\"onseeked\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeked(value))
        )
        .or(
        LiteralParser::new("\"onseeking\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onseeking(value))
        )
        .or(
        LiteralParser::new("\"onselect\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onselect(value))
        )
        .or(
        LiteralParser::new("\"onshow\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onshow(value))
        )
        .or(
        LiteralParser::new("\"onstalled\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onstalled(value))
        )
        .or(
        LiteralParser::new("\"onsubmit\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsubmit(value))
        )
        .or(
        LiteralParser::new("\"onsuspend\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onsuspend(value))
        )
        .or(
        LiteralParser::new("\"ontimeupdate\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Ontimeupdate(value))
        )
        .or(
        LiteralParser::new("\"onvolumechange\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onvolumechange(value))
        )
        .or(
        LiteralParser::new("\"onwaiting\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Onwaiting(value))
        )
        .or(
        LiteralParser::new("\"part\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Part(value))
        )
        .or(
        LiteralParser::new("\"role\"=")
            .ignore_output_then(RolesValues::new_parser())
            .map_output(|value| Self::Role(value))
        )
        .or(
        LiteralParser::new("\"slot\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Slot(value))
        )
        .or(
        LiteralParser::new("\"spellcheck\"=")
            .ignore_output_then(BValues::new_parser())
            .map_output(|value| Self::Spellcheck(value))
        )
        .or(
        LiteralParser::new("\"style\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Style(value))
        )
        .or(
        LiteralParser::new("\"tabindex\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Tabindex(value))
        )
        .or(
        LiteralParser::new("\"title\"=")
            .ignore_output_then(String::new_parser())
            .map_output(|value| Self::Title(value))
        )
        .or(
        LiteralParser::new("\"translate\"=")
            .ignore_output_then(YValues::new_parser())
            .map_output(|value| Self::Translate(value))
        )
    }
}
#[derive(Debug, Clone)]
pub struct A{
    attributes: Vec<AAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for A {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<a")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(AAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</a>")
            .map_output(|(attributes, body)| A { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Abbr{
    attributes: Vec<AbbrAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Abbr {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<abbr")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(AbbrAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</abbr>")
            .map_output(|(attributes, body)| Abbr { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Address{
    attributes: Vec<AddressAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Address {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<address")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(AddressAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</address>")
            .map_output(|(attributes, body)| Address { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Area{
    attributes: Vec<AreaAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Area {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<area")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(AreaAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</area>")
            .map_output(|(attributes, body)| Area { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Article{
    attributes: Vec<ArticleAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Article {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<article")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ArticleAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</article>")
            .map_output(|(attributes, body)| Article { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Aside{
    attributes: Vec<AsideAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Aside {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<aside")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(AsideAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</aside>")
            .map_output(|(attributes, body)| Aside { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Audio{
    attributes: Vec<AudioAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Audio {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<audio")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(AudioAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</audio>")
            .map_output(|(attributes, body)| Audio { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct B{
    attributes: Vec<BAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for B {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<b")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(BAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</b>")
            .map_output(|(attributes, body)| B { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Base{
    attributes: Vec<BaseAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Base {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<base")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(BaseAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</base>")
            .map_output(|(attributes, body)| Base { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Bdi{
    attributes: Vec<BdiAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Bdi {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<bdi")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(BdiAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</bdi>")
            .map_output(|(attributes, body)| Bdi { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Bdo{
    attributes: Vec<BdoAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Bdo {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<bdo")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(BdoAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</bdo>")
            .map_output(|(attributes, body)| Bdo { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Blockquote{
    attributes: Vec<BlockquoteAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Blockquote {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<blockquote")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(BlockquoteAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</blockquote>")
            .map_output(|(attributes, body)| Blockquote { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Body{
    attributes: Vec<BodyAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Body {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<body")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(BodyAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</body>")
            .map_output(|(attributes, body)| Body { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Br{
    attributes: Vec<BrAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Br {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<br")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(BrAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</br>")
            .map_output(|(attributes, body)| Br { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Button{
    attributes: Vec<ButtonAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Button {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<button")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ButtonAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</button>")
            .map_output(|(attributes, body)| Button { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Canvas{
    attributes: Vec<CanvasAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Canvas {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<canvas")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(CanvasAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</canvas>")
            .map_output(|(attributes, body)| Canvas { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Caption{
    attributes: Vec<CaptionAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Caption {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<caption")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(CaptionAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</caption>")
            .map_output(|(attributes, body)| Caption { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Cite{
    attributes: Vec<CiteAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Cite {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<cite")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(CiteAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</cite>")
            .map_output(|(attributes, body)| Cite { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Code{
    attributes: Vec<CodeAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Code {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<code")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(CodeAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</code>")
            .map_output(|(attributes, body)| Code { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Col{
    attributes: Vec<ColAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Col {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<col")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ColAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</col>")
            .map_output(|(attributes, body)| Col { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Colgroup{
    attributes: Vec<ColgroupAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Colgroup {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<colgroup")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ColgroupAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</colgroup>")
            .map_output(|(attributes, body)| Colgroup { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Data{
    attributes: Vec<DataAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Data {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<data")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DataAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</data>")
            .map_output(|(attributes, body)| Data { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Datalist{
    attributes: Vec<DatalistAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Datalist {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<datalist")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DatalistAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</datalist>")
            .map_output(|(attributes, body)| Datalist { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Dd{
    attributes: Vec<DdAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Dd {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<dd")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DdAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</dd>")
            .map_output(|(attributes, body)| Dd { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Del{
    attributes: Vec<DelAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Del {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<del")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DelAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</del>")
            .map_output(|(attributes, body)| Del { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Details{
    attributes: Vec<DetailsAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Details {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<details")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DetailsAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</details>")
            .map_output(|(attributes, body)| Details { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Dfn{
    attributes: Vec<DfnAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Dfn {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<dfn")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DfnAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</dfn>")
            .map_output(|(attributes, body)| Dfn { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Dialog{
    attributes: Vec<DialogAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Dialog {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<dialog")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DialogAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</dialog>")
            .map_output(|(attributes, body)| Dialog { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Div{
    attributes: Vec<DivAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Div {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<div")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DivAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</div>")
            .map_output(|(attributes, body)| Div { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Dl{
    attributes: Vec<DlAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Dl {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<dl")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DlAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</dl>")
            .map_output(|(attributes, body)| Dl { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Dt{
    attributes: Vec<DtAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Dt {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<dt")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(DtAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</dt>")
            .map_output(|(attributes, body)| Dt { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Em{
    attributes: Vec<EmAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Em {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<em")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(EmAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</em>")
            .map_output(|(attributes, body)| Em { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Embed{
    attributes: Vec<EmbedAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Embed {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<embed")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(EmbedAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</embed>")
            .map_output(|(attributes, body)| Embed { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Fieldset{
    attributes: Vec<FieldsetAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Fieldset {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<fieldset")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(FieldsetAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</fieldset>")
            .map_output(|(attributes, body)| Fieldset { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Figcaption{
    attributes: Vec<FigcaptionAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Figcaption {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<figcaption")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(FigcaptionAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</figcaption>")
            .map_output(|(attributes, body)| Figcaption { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Figure{
    attributes: Vec<FigureAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Figure {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<figure")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(FigureAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</figure>")
            .map_output(|(attributes, body)| Figure { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Footer{
    attributes: Vec<FooterAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Footer {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<footer")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(FooterAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</footer>")
            .map_output(|(attributes, body)| Footer { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Form{
    attributes: Vec<FormAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Form {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<form")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(FormAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</form>")
            .map_output(|(attributes, body)| Form { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct H1{
    attributes: Vec<H1Attributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for H1 {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<h1")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(H1Attributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</h1>")
            .map_output(|(attributes, body)| H1 { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct H2{
    attributes: Vec<H2Attributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for H2 {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<h2")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(H2Attributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</h2>")
            .map_output(|(attributes, body)| H2 { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct H3{
    attributes: Vec<H3Attributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for H3 {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<h3")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(H3Attributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</h3>")
            .map_output(|(attributes, body)| H3 { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct H4{
    attributes: Vec<H4Attributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for H4 {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<h4")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(H4Attributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</h4>")
            .map_output(|(attributes, body)| H4 { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct H5{
    attributes: Vec<H5Attributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for H5 {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<h5")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(H5Attributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</h5>")
            .map_output(|(attributes, body)| H5 { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct H6{
    attributes: Vec<H6Attributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for H6 {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<h6")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(H6Attributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</h6>")
            .map_output(|(attributes, body)| H6 { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Head{
    attributes: Vec<HeadAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Head {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<head")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(HeadAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</head>")
            .map_output(|(attributes, body)| Head { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Header{
    attributes: Vec<HeaderAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Header {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<header")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(HeaderAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</header>")
            .map_output(|(attributes, body)| Header { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Hgroup{
    attributes: Vec<HgroupAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Hgroup {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<hgroup")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(HgroupAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</hgroup>")
            .map_output(|(attributes, body)| Hgroup { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Hr{
    attributes: Vec<HrAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Hr {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<hr")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(HrAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</hr>")
            .map_output(|(attributes, body)| Hr { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Html{
    attributes: Vec<HtmlAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Html {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<html")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(HtmlAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</html>")
            .map_output(|(attributes, body)| Html { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct I{
    attributes: Vec<IAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for I {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<i")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(IAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</i>")
            .map_output(|(attributes, body)| I { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Iframe{
    attributes: Vec<IframeAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Iframe {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<iframe")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(IframeAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</iframe>")
            .map_output(|(attributes, body)| Iframe { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Img{
    attributes: Vec<ImgAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Img {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<img")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ImgAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</img>")
            .map_output(|(attributes, body)| Img { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Input{
    attributes: Vec<InputAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Input {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<input")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(InputAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</input>")
            .map_output(|(attributes, body)| Input { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Ins{
    attributes: Vec<InsAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Ins {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<ins")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(InsAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</ins>")
            .map_output(|(attributes, body)| Ins { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Kbd{
    attributes: Vec<KbdAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Kbd {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<kbd")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(KbdAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</kbd>")
            .map_output(|(attributes, body)| Kbd { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Label{
    attributes: Vec<LabelAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Label {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<label")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(LabelAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</label>")
            .map_output(|(attributes, body)| Label { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Legend{
    attributes: Vec<LegendAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Legend {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<legend")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(LegendAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</legend>")
            .map_output(|(attributes, body)| Legend { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Li{
    attributes: Vec<LiAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Li {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<li")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(LiAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</li>")
            .map_output(|(attributes, body)| Li { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Link{
    attributes: Vec<LinkAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Link {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<link")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(LinkAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</link>")
            .map_output(|(attributes, body)| Link { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Main{
    attributes: Vec<MainAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Main {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<main")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(MainAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</main>")
            .map_output(|(attributes, body)| Main { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Map{
    attributes: Vec<MapAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Map {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<map")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(MapAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</map>")
            .map_output(|(attributes, body)| Map { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Mark{
    attributes: Vec<MarkAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Mark {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<mark")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(MarkAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</mark>")
            .map_output(|(attributes, body)| Mark { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Menu{
    attributes: Vec<MenuAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Menu {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<menu")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(MenuAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</menu>")
            .map_output(|(attributes, body)| Menu { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Meta{
    attributes: Vec<MetaAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Meta {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<meta")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(MetaAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</meta>")
            .map_output(|(attributes, body)| Meta { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Meter{
    attributes: Vec<MeterAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Meter {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<meter")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(MeterAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</meter>")
            .map_output(|(attributes, body)| Meter { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Nav{
    attributes: Vec<NavAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Nav {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<nav")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(NavAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</nav>")
            .map_output(|(attributes, body)| Nav { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Noscript{
    attributes: Vec<NoscriptAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Noscript {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<noscript")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(NoscriptAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</noscript>")
            .map_output(|(attributes, body)| Noscript { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Object{
    attributes: Vec<ObjectAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Object {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<object")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ObjectAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</object>")
            .map_output(|(attributes, body)| Object { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Ol{
    attributes: Vec<OlAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Ol {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<ol")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(OlAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</ol>")
            .map_output(|(attributes, body)| Ol { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Optgroup{
    attributes: Vec<OptgroupAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Optgroup {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<optgroup")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(OptgroupAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</optgroup>")
            .map_output(|(attributes, body)| Optgroup { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Option{
    attributes: Vec<OptionAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Option {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<option")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(OptionAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</option>")
            .map_output(|(attributes, body)| Option { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Output{
    attributes: Vec<OutputAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Output {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<output")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(OutputAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</output>")
            .map_output(|(attributes, body)| Output { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct P{
    attributes: Vec<PAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for P {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<p")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(PAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</p>")
            .map_output(|(attributes, body)| P { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Param{
    attributes: Vec<ParamAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Param {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<param")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ParamAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</param>")
            .map_output(|(attributes, body)| Param { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Picture{
    attributes: Vec<PictureAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Picture {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<picture")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(PictureAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</picture>")
            .map_output(|(attributes, body)| Picture { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Pre{
    attributes: Vec<PreAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Pre {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<pre")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(PreAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</pre>")
            .map_output(|(attributes, body)| Pre { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Progress{
    attributes: Vec<ProgressAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Progress {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<progress")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ProgressAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</progress>")
            .map_output(|(attributes, body)| Progress { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Q{
    attributes: Vec<QAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Q {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<q")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(QAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</q>")
            .map_output(|(attributes, body)| Q { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Rb{
    attributes: Vec<RbAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Rb {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<rb")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(RbAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</rb>")
            .map_output(|(attributes, body)| Rb { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Rp{
    attributes: Vec<RpAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Rp {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<rp")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(RpAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</rp>")
            .map_output(|(attributes, body)| Rp { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Rt{
    attributes: Vec<RtAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Rt {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<rt")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(RtAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</rt>")
            .map_output(|(attributes, body)| Rt { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Ruby{
    attributes: Vec<RubyAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Ruby {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<ruby")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(RubyAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</ruby>")
            .map_output(|(attributes, body)| Ruby { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct S{
    attributes: Vec<SAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for S {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<s")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</s>")
            .map_output(|(attributes, body)| S { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Samp{
    attributes: Vec<SampAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Samp {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<samp")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SampAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</samp>")
            .map_output(|(attributes, body)| Samp { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Script{
    attributes: Vec<ScriptAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Script {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<script")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ScriptAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</script>")
            .map_output(|(attributes, body)| Script { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Section{
    attributes: Vec<SectionAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Section {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<section")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SectionAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</section>")
            .map_output(|(attributes, body)| Section { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Select{
    attributes: Vec<SelectAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Select {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<select")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SelectAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</select>")
            .map_output(|(attributes, body)| Select { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Slot{
    attributes: Vec<SlotAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Slot {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<slot")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SlotAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</slot>")
            .map_output(|(attributes, body)| Slot { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Small{
    attributes: Vec<SmallAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Small {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<small")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SmallAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</small>")
            .map_output(|(attributes, body)| Small { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Source{
    attributes: Vec<SourceAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Source {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<source")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SourceAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</source>")
            .map_output(|(attributes, body)| Source { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Span{
    attributes: Vec<SpanAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Span {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<span")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SpanAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</span>")
            .map_output(|(attributes, body)| Span { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Strong{
    attributes: Vec<StrongAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Strong {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<strong")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(StrongAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</strong>")
            .map_output(|(attributes, body)| Strong { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Style{
    attributes: Vec<StyleAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Style {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<style")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(StyleAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</style>")
            .map_output(|(attributes, body)| Style { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Sub{
    attributes: Vec<SubAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Sub {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<sub")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SubAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</sub>")
            .map_output(|(attributes, body)| Sub { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Summary{
    attributes: Vec<SummaryAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Summary {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<summary")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SummaryAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</summary>")
            .map_output(|(attributes, body)| Summary { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Sup{
    attributes: Vec<SupAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Sup {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<sup")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(SupAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</sup>")
            .map_output(|(attributes, body)| Sup { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Table{
    attributes: Vec<TableAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Table {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<table")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TableAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</table>")
            .map_output(|(attributes, body)| Table { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Tbody{
    attributes: Vec<TbodyAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Tbody {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<tbody")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TbodyAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</tbody>")
            .map_output(|(attributes, body)| Tbody { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Td{
    attributes: Vec<TdAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Td {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<td")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TdAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</td>")
            .map_output(|(attributes, body)| Td { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Template{
    attributes: Vec<TemplateAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Template {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<template")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TemplateAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</template>")
            .map_output(|(attributes, body)| Template { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Textarea{
    attributes: Vec<TextareaAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Textarea {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<textarea")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TextareaAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</textarea>")
            .map_output(|(attributes, body)| Textarea { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Tfoot{
    attributes: Vec<TfootAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Tfoot {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<tfoot")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TfootAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</tfoot>")
            .map_output(|(attributes, body)| Tfoot { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Th{
    attributes: Vec<ThAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Th {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<th")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(ThAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</th>")
            .map_output(|(attributes, body)| Th { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Thead{
    attributes: Vec<TheadAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Thead {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<thead")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TheadAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</thead>")
            .map_output(|(attributes, body)| Thead { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Time{
    attributes: Vec<TimeAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Time {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<time")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TimeAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</time>")
            .map_output(|(attributes, body)| Time { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Title{
    attributes: Vec<TitleAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Title {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<title")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TitleAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</title>")
            .map_output(|(attributes, body)| Title { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Tr{
    attributes: Vec<TrAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Tr {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<tr")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TrAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</tr>")
            .map_output(|(attributes, body)| Tr { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Track{
    attributes: Vec<TrackAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Track {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<track")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(TrackAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</track>")
            .map_output(|(attributes, body)| Track { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct U{
    attributes: Vec<UAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for U {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<u")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(UAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</u>")
            .map_output(|(attributes, body)| U { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Ul{
    attributes: Vec<UlAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Ul {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<ul")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(UlAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</ul>")
            .map_output(|(attributes, body)| Ul { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Var{
    attributes: Vec<VarAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Var {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<var")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(VarAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</var>")
            .map_output(|(attributes, body)| Var { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Video{
    attributes: Vec<VideoAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Video {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<video")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(VideoAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</video>")
            .map_output(|(attributes, body)| Video { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub struct Wbr{
    attributes: Vec<WbrAttributes>,
    body: Vec<Element>,
}

impl kalosm_sample::Parse for Wbr {
    fn new_parser() -> impl kalosm_sample::SendCreateParserState<Output = Self> {
        use kalosm_sample::*;
        LiteralParser::new("<wbr")
            .ignore_output_then(
                LiteralParser::new(" ")
                    .then(WbrAttributes::new_parser())
                    .repeat(0..)
            )
            .then_literal(">")
            .then(Element::new_parser().repeat(0..))
            .then_literal("</wbr>")
            .map_output(|(attributes, body)| Wbr { attributes, body })
    }
}
#[derive(Debug, Clone)]
pub enum Element {
    A(A),
    Abbr(Abbr),
    Address(Address),
    Area(Area),
    Article(Article),
    Aside(Aside),
    Audio(Audio),
    B(B),
    Base(Base),
    Bdi(Bdi),
    Bdo(Bdo),
    Blockquote(Blockquote),
    Body(Body),
    Br(Br),
    Button(Button),
    Canvas(Canvas),
    Caption(Caption),
    Cite(Cite),
    Code(Code),
    Col(Col),
    Colgroup(Colgroup),
    Data(Data),
    Datalist(Datalist),
    Dd(Dd),
    Del(Del),
    Details(Details),
    Dfn(Dfn),
    Dialog(Dialog),
    Div(Div),
    Dl(Dl),
    Dt(Dt),
    Em(Em),
    Embed(Embed),
    Fieldset(Fieldset),
    Figcaption(Figcaption),
    Figure(Figure),
    Footer(Footer),
    Form(Form),
    H1(H1),
    H2(H2),
    H3(H3),
    H4(H4),
    H5(H5),
    H6(H6),
    Head(Head),
    Header(Header),
    Hgroup(Hgroup),
    Hr(Hr),
    Html(Html),
    I(I),
    Iframe(Iframe),
    Img(Img),
    Input(Input),
    Ins(Ins),
    Kbd(Kbd),
    Label(Label),
    Legend(Legend),
    Li(Li),
    Link(Link),
    Main(Main),
    Map(Map),
    Mark(Mark),
    Menu(Menu),
    Meta(Meta),
    Meter(Meter),
    Nav(Nav),
    Noscript(Noscript),
    Object(Object),
    Ol(Ol),
    Optgroup(Optgroup),
    Option(Option),
    Output(Output),
    P(P),
    Param(Param),
    Picture(Picture),
    Pre(Pre),
    Progress(Progress),
    Q(Q),
    Rb(Rb),
    Rp(Rp),
    Rt(Rt),
    Ruby(Ruby),
    S(S),
    Samp(Samp),
    Script(Script),
    Section(Section),
    Select(Select),
    Slot(Slot),
    Small(Small),
    Source(Source),
    Span(Span),
    Strong(Strong),
    Style(Style),
    Sub(Sub),
    Summary(Summary),
    Sup(Sup),
    Table(Table),
    Tbody(Tbody),
    Td(Td),
    Template(Template),
    Textarea(Textarea),
    Tfoot(Tfoot),
    Th(Th),
    Thead(Thead),
    Time(Time),
    Title(Title),
    Tr(Tr),
    Track(Track),
    U(U),
    Ul(Ul),
    Var(Var),
    Video(Video),
    Wbr(Wbr),
}
